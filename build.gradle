buildscript {
  repositories {
    maven { url = 'https://plugins.gradle.org/m2/' }
    mavenCentral()
  }
  dependencies {
    // https://plugins.gradle.org/plugin/org.beryx.jlink
    classpath "org.beryx:badass-jlink-plugin:+"
  }
}

def getAppVersion = { ->
  try (final var gitTagOut = new ByteArrayOutputStream()) {
    exec {
      commandLine 'git', 'tag', '--points-at', 'HEAD'
      standardOutput = gitTagOut
    }
    final var tagName = gitTagOut.toString().strip()
    if (tagName.isBlank()) {
      try (final var gitHashOut = new ByteArrayOutputStream()) {
        exec {
          commandLine 'git', 'rev-parse', '--short', 'HEAD'
          standardOutput = gitHashOut
        }
        return 'git-' + gitHashOut.toString().strip()
      }
    } else {
      return tagName
    }
  }
} as Object

ext {
  VERSION = getAppVersion()
  VCS_URL = 'https://github.com/sava-software/anchor-programs'
  jsoniter = '2.11.+'
  sava = '1.0.+'
  sava_solana_programs = '1.0.3'
  sava_anchor_src_gen = '1.0.4'
  bouncycastleMinor = 'jdk18on'
  bouncycastlePatch = '1.78.1' // https://www.bouncycastle.org/latest_releases.html#LATEST
}

subprojects {
  apply plugin: 'java-library'
  apply plugin: 'maven-publish'

  project.group = 'software.sava'
  project.version = "$VERSION"

  final JLV = JavaLanguageVersion.of(project.findProperty('jv') as Integer ?: 22)

  plugins.withType(JavaPlugin).configureEach {
    java {
      modularity.inferModulePath = true
      toolchain {
        languageVersion = JLV
      }
    }
  }

  repositories {
    maven {
      url = "https://maven.pkg.github.com/comodal/json-iterator"
      credentials {
        username = project.findProperty("gpr.user") ?: System.getenv("GITHUB_ACTOR")
        password = project.findProperty("gpr.token") ?: System.getenv("GITHUB_TOKEN")
      }
    }
    maven {
      url = "https://maven.pkg.github.com/sava-software/sava"
      credentials {
        username = project.findProperty("gpr.user") ?: System.getenv("GITHUB_ACTOR")
        password = project.findProperty("gpr.token") ?: System.getenv("GITHUB_TOKEN")
      }
    }
    maven {
      url = "https://maven.pkg.github.com/sava-software/solana-programs"
      credentials {
        username = project.findProperty("gpr.sava.user") ?: System.getenv("GITHUB_ACTOR")
        password = project.findProperty("gpr.sava.token") ?: System.getenv("GITHUB_TOKEN")
      }
    }
    maven {
      url = "https://maven.pkg.github.com/sava-software/anchor-src-gen"
      credentials {
        username = project.findProperty("gpr.sava.user") ?: System.getenv("GITHUB_ACTOR")
        password = project.findProperty("gpr.sava.token") ?: System.getenv("GITHUB_TOKEN")
      }
    }
    mavenCentral()
  }

  configurations.configureEach {
    resolutionStrategy {
      cacheDynamicVersionsFor 15, 'minutes'
      cacheChangingModulesFor 15, 'minutes'
    }
  }

  dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:+'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:+'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:+'
  }

  test {
    useJUnitPlatform()
    testLogging {
      events "passed", "skipped", "failed", "standardOut", "standardError"
      exceptionFormat "full"
      showStandardStreams true
    }
  }

  tasks.register('sourcesJar', Jar) {
    from sourceSets.main.allJava
    archiveClassifier.set('sources')
  }

  publishing {
    publications {
      mavenJava(MavenPublication) {
        from components.java
        artifact sourcesJar
        groupId project.group
        artifactId project.name
        version = project.version
        pom {
          name = project.name
          url = "$VCS_URL"
          scm {
            connection = 'scm:git:git@github.com:sava-software/anchor-programs.git'
            url = "$VCS_URL"
          }
        }
      }
    }
    repositories {
      maven {
        name = "GitHubPackages"
        url = "https://maven.pkg.github.com/sava-software/anchor-programs"
        credentials {
          username = System.getenv("GITHUB_ACTOR") ?: project.findProperty("gpr.user.write")
          password = System.getenv("GITHUB_TOKEN") ?: project.findProperty("gpr.token.write")
        }
      }
    }
  }
}